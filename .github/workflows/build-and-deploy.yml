name: Build and Deploy Windows ASP.NET to ACR

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'aspnet-demo/**'
      - '.github/workflows/build-and-deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'aspnet-demo/**'

env:
  REGISTRY_NAME: acrdemoeastus2001
  IMAGE_NAME: windows-aspnet
  WORKING_DIRECTORY: ./aspnet-demo

jobs:
  build-and-push:
    runs-on: windows-latest
    
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4

    - name: 'Setup .NET'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0.x'

    - name: 'Restore dependencies'
      run: dotnet restore
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: 'Build application'
      run: dotnet build --no-restore --configuration Release
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: 'Run tests'
      run: dotnet test --no-build --configuration Release --verbosity normal
      working-directory: ${{ env.WORKING_DIRECTORY }}
      continue-on-error: true  # Continue even if no tests exist

    - name: 'Login to Azure Container Registry'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: 'Build Docker image'
      run: |
        $imageTag = "${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        $latestTag = "${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest"
        
        # Build with multiple tags
        docker build -t $imageTag -t $latestTag -f Dockerfile .
        
        echo "Built image with tags:"
        echo "  - $imageTag"
        echo "  - $latestTag"
        
        # Output for use in subsequent steps
        echo "IMAGE_TAG=$imageTag" >> $env:GITHUB_ENV
        echo "LATEST_TAG=$latestTag" >> $env:GITHUB_ENV
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: 'Push Docker image to ACR'
      run: |
        echo "Pushing image to Azure Container Registry..."
        docker push ${{ env.IMAGE_TAG }}
        docker push ${{ env.LATEST_TAG }}
        
        echo "Successfully pushed:"
        echo "  - ${{ env.IMAGE_TAG }}"
        echo "  - ${{ env.LATEST_TAG }}"

    - name: 'Create version tag'
      if: github.ref == 'refs/heads/main'
      run: |
        $version = "v1.0.${{ github.run_number }}"
        $versionTag = "${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:$version"
        
        echo "Creating version tag: $version"
        docker tag ${{ env.IMAGE_TAG }} $versionTag
        docker push $versionTag
        
        echo "VERSION_TAG=$versionTag" >> $env:GITHUB_ENV
        echo "VERSION=$version" >> $env:GITHUB_ENV

    - name: 'Output image information'
      run: |
        echo "### üê≥ Container Image Built Successfully! ###"
        echo ""
        echo "**Image Tags:**"
        echo "- SHA: ${{ env.IMAGE_TAG }}"
        echo "- Latest: ${{ env.LATEST_TAG }}"
        if ("${{ env.VERSION_TAG }}" -ne "") {
          echo "- Version: ${{ env.VERSION_TAG }}"
        }
        echo ""
        echo "**Registry:** ${{ env.REGISTRY_NAME }}.azurecr.io"
        echo "**Repository:** ${{ env.IMAGE_NAME }}"
        echo ""
        echo "**Next Steps:**"
        echo "1. Update Kubernetes manifests with new image tag"
        echo "2. ArgoCD will automatically sync the changes"
        echo "3. Monitor deployment in ArgoCD UI"

  update-manifests:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 'Checkout repository'
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: 'Setup Kustomize'
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    - name: 'Update development environment'
      run: |
        cd environments/development
        kustomize edit set image ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
        
        echo "Updated development environment with image: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}"

    - name: 'Commit and push changes'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add environments/development/
        
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "üöÄ Update development image to ${{ github.sha }}
          
          - Updated by: GitHub Actions
          - Workflow: ${{ github.workflow }}
          - Run: ${{ github.run_number }}
          - Image: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          
          git push
          echo "Successfully updated development environment manifests"
        fi

  security-scan:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 'Checkout repository'
      uses: actions/checkout@v4

    - name: 'Run Trivy vulnerability scanner'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 'Upload Trivy scan results'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
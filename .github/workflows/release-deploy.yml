name: Promote and Deploy to Staging/Production

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      image_tag:
        description: 'Image tag to deploy (leave empty to build new)'
        required: false
        type: string

permissions:
  contents: write
  pull-requests: write

env:
  REGISTRY_NAME: acrdemoeastus2001
  IMAGE_NAME: windows-aspnet

jobs:
  determine-image:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.set-tag.outputs.tag }}
      
    steps:
    - name: 'Checkout repository'
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Get full history to search for commits

    - name: 'Find latest built image tag'
      id: set-tag
      run: |
        if [[ "${{ github.event.inputs.image_tag }}" != "" ]]; then
          # Use provided image tag
          TAG="${{ github.event.inputs.image_tag }}"
          echo "Using provided image tag: $TAG"
        elif [[ "${{ github.event_name }}" == "release" ]]; then
          # Use release tag
          TAG="${{ github.event.release.tag_name }}"
          echo "Using release tag: $TAG"
        else
          # Find the most recent commit that modified aspnet-demo/ (which would have triggered a build)
          echo "üîç Finding latest commit that triggered a build..."
          
          # Get the most recent commit that modified aspnet-demo directory
          LATEST_APP_COMMIT=$(git log --max-count=1 --pretty=format:%H -- aspnet-demo/)
          
          if [[ -n "$LATEST_APP_COMMIT" ]]; then
            TAG="$LATEST_APP_COMMIT"
            echo "Found latest application commit: $TAG"
            
            # Verify this commit exists by checking if it's in the git history
            if git cat-file -e "$TAG^{commit}" 2>/dev/null; then
              echo "‚úÖ Commit verified in git history"
            else
              echo "‚ö†Ô∏è  Commit not found in git history, using current SHA as fallback"
              TAG="${{ github.sha }}"
            fi
          else
            echo "‚ö†Ô∏è  No commits found in aspnet-demo/, using current SHA"
            TAG="${{ github.sha }}"
          fi
          
          echo "Using image tag from latest application change: $TAG"
        fi
        
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "Final image tag: $TAG"

    - name: 'Verify deployment readiness'
      run: |
        echo "üîç Deployment Summary:"
        echo "Registry: ${{ env.REGISTRY_NAME }}.azurecr.io"
        echo "Image: ${{ env.IMAGE_NAME }}"
        echo "Tag: ${{ steps.set-tag.outputs.tag }}"
        echo "Full Image: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ steps.set-tag.outputs.tag }}"
        echo ""
        echo "‚úÖ This image should exist in ACR (built from latest application code change)"
        echo "üìã Ready for promotion to staging/production"

  deploy-environment:
    needs: [determine-image]
    runs-on: ubuntu-latest
    if: always() && !cancelled()
    
    steps:
    - name: 'Checkout repository'
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: 'Setup Kustomize'
      run: |
        # Use direct binary download to avoid GitHub rate limiting
        KUSTOMIZE_VERSION="v5.3.0"
        wget -O kustomize.tar.gz "https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2F${KUSTOMIZE_VERSION}/kustomize_${KUSTOMIZE_VERSION}_linux_amd64.tar.gz"
        tar -xzf kustomize.tar.gz
        chmod +x kustomize
        sudo mv kustomize /usr/local/bin/
        kustomize version

    - name: 'Determine image tag and environment'
      id: deployment-info
      run: |
        if [[ "${{ github.event.inputs.image_tag }}" != "" ]]; then
          IMAGE_TAG="${{ github.event.inputs.image_tag }}"
        else
          IMAGE_TAG="${{ needs.determine-image.outputs.image-tag }}"
        fi
        
        if [[ "${{ github.event.inputs.environment }}" != "" ]]; then
          ENVIRONMENT="${{ github.event.inputs.environment }}"
        else
          ENVIRONMENT="production"
        fi
        
        echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
        
        echo "Deploying to: $ENVIRONMENT"
        echo "Image tag: $IMAGE_TAG"

    - name: 'Update environment manifests'
      run: |
        ENVIRONMENT="${{ steps.deployment-info.outputs.environment }}"
        IMAGE_TAG="${{ steps.deployment-info.outputs.image-tag }}"
        
        cd environments/$ENVIRONMENT
        kustomize edit set image ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:$IMAGE_TAG
        
        echo "Updated $ENVIRONMENT environment with image: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:$IMAGE_TAG"

    - name: 'Create branch and push for Production'
      if: steps.deployment-info.outputs.environment == 'production'
      run: |
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        BRANCH_NAME="deploy-production-${{ steps.deployment-info.outputs.image-tag }}-${TIMESTAMP}"
        
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Ensure we're on main branch and up to date
        git checkout main
        git pull origin main
        
        # Create and switch to new branch
        git checkout -b "$BRANCH_NAME"
        
        # Add changes
        git add environments/production/
        
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "üöÄ Deploy ${{ steps.deployment-info.outputs.image-tag }} to Production

          - Environment: Production  
          - Image Tag: ${{ steps.deployment-info.outputs.image-tag }}
          - Triggered by: ${{ github.event_name }}"
          
          # Push the branch
          git push origin "$BRANCH_NAME"
          
          echo "‚úÖ Branch '$BRANCH_NAME' created and pushed"
          echo "üîó Create PR manually at: https://github.com/${{ github.repository }}/compare/$BRANCH_NAME"
          echo ""
          echo "## üìã PR Details to use:"
          echo "**Title:** Deploy ${{ steps.deployment-info.outputs.image-tag }} to Production"
          echo ""
          echo "**Description:**"
          echo "## Production Deployment Request"
          echo ""
          echo "**Image Tag:** \`${{ steps.deployment-info.outputs.image-tag }}\`"
          echo "**Environment:** Production"
          echo "**Triggered by:** ${{ github.event_name }}"
          echo ""
          echo "### Changes"
          echo "- Updates production environment to use image: \`${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ steps.deployment-info.outputs.image-tag }}\`"
          echo ""
          echo "### Deployment Process"
          echo "1. Review and approve this PR"
          echo "2. Merge to deploy to production"  
          echo "3. Monitor deployment in ArgoCD UI"
        fi

    - name: 'Direct commit for Staging'
      if: steps.deployment-info.outputs.environment == 'staging'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add environments/staging/
        
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "üöÄ Deploy ${{ steps.deployment-info.outputs.image-tag }} to Staging
          
          - Environment: Staging
          - Image Tag: ${{ steps.deployment-info.outputs.image-tag }}
          - Triggered by: ${{ github.event_name }}
          - Workflow: ${{ github.workflow }}"
          
          git push origin main
          echo "Successfully deployed to staging environment"
        fi

  notify-teams:
    needs: [determine-image, deploy-environment]
    runs-on: ubuntu-latest
    if: always() && !cancelled()
    
    steps:
    - name: 'Notify deployment status'
      run: |
        if [[ "${{ needs.deploy-environment.result }}" == "success" ]]; then
          echo "‚úÖ Deployment completed successfully!"
          echo "Environment: ${{ github.event.inputs.environment || 'production' }}"
          echo "Image: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ needs.determine-image.outputs.image-tag }}"
        else
          echo "‚ùå Deployment failed!"
          echo "Please check the workflow logs for more details."
        fi